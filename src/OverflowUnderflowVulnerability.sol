// SPDX-License-Identifier: UNLICENSED
pragma solidity >= 0.7.0 < 0.9.0;
import  "./SafeMath.sol";

contract OverflowUnderflowVulnerability {
   function overflowExample(uint8 _value) public pure returns (uint8) {
        uint8 maxValue = 255;
        maxValue += _value;
        return maxValue;
   }

   function underflowExample(uint8 _value) public pure returns (uint8) {
        uint8 minValue = 0;
        minValue -= _value;
        return minValue;
   }
}


contract OverflowUnderflowOptimized {
    using SafeMath for uint256;

    function overflowExample(uint8 _value) public pure returns (uint8) {
        uint256 maxValue = 255;
        maxValue = maxValue.add(_value);
        require(maxValue <= 255, "Overflow beyond uint8 limits");
        return uint8(maxValue);
    }

    function underflowExample(uint8 _value) public pure returns (uint8) {
        uint256 minValue = 0;
        require(minValue >= _value, "Underflow detected");
        minValue = minValue.sub(_value);
        return uint8(minValue);
    }
}
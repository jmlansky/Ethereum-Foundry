// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

contract ReentrancyVulnerability {
    mapping(address => uint256) private balances;

    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 _amount) external payable {
        require(balances[msg.sender] >= _amount, "Insuficient balance");


        // VULNERABILIDAD: Actualiza el saldo antes de terminar la transaccion => no hace un "await"
        (bool success, ) = msg.sender.call{value: _amount}("");
        require(success, "Transaccion fallida");

        balances[msg.sender] -= _amount;
    }
}



contract ReentrancyOptimized {
    mapping(address => uint256) private balances;

    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 _amount) external payable {
        require(balances[msg.sender] >= _amount, "Insuficient balance");

        // espera a que se termine la transaccion
        require(payable(msg.sender).send(_amount), "Fallo en el envio"); 
        
        balances[msg.sender] -= _amount;
    }
}

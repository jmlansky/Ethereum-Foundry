// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

contract RaceConditionVulnerability {
    uint public balance;
    mapping(address => uint) public balances;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
        balance += msg.value;
    }

    function withdraw(uint _amount) public {
        require (balances[msg.sender] >= _amount, "Insuficient founds");

        uint prevBalance = balances[msg.sender];

        balances[msg.sender] -= _amount;

        require(payable(msg.sender).send(_amount), "Transfer failed");

        require(balances[msg.sender] == prevBalance, "Race Condition detected"); // Vulnerabilidad
    }
}


contract RaceConditionOptimized {
    uint public balance;
    mapping(address => uint) public balances;
    mapping(address => bool) public isSending;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
        balance += msg.value;
    }

    function withdraw(uint _amount) public {
        require (balances[msg.sender] >= _amount, "Insuficient founds");
        require (!isSending[msg.sender], "Sending Funds");

        isSending[msg.sender] = true;
        require(payable(msg.sender).send(_amount), "Transfer failed");
                
        balances[msg.sender] -= _amount;
        isSending[msg.sender] = false;
    }
}
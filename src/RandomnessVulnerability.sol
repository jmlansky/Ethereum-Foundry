// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

contract RandomnessVulnerable {
    uint private seed;
    uint public randomNumber;

    constructor() {
        seed = block.timestamp;
    }

    function generateRandomNumber() public {
        // problema: atacante puede conocer la generacion de numero aleatorio
        randomNumber = uint(keccak256(abi.encodePacked(block.prevrandao, block.timestamp, seed)));
    }
}

// buscar algun oraculo que nos devuelva el numero random => ver chainlink u otro
interface RandomnessOracle {    
    function getRandomNumber() external returns (uint);
}

contract RandomnessOptimized {    
    uint public randomNumber;
    address private oracle;


    constructor() {
        address _oracleAddress = address(1); // buscar el address del oraculo
        oracle = _oracleAddress;
    }

    function generateRandomNumber() public {
        require(oracle != address(0), "Oracle Address not set");

        randomNumber = RandomnessOracle(oracle).getRandomNumber();
    }
}
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

contract FallbackIssues {
    mapping(address => uint256) private balances;

    receive() external payable{}
    fallback() external payable {
        balances[msg.sender] += msg.value;

        (bool success, ) = msg.sender.call{value: msg.value}("");
        require(success, "Transferencia fallida");
    }

    function withdraw() public {
        uint256 amount = balances[msg.sender];
        require(amount > 0, "Fondos insuficinetes");

        balances[msg.sender] = 0;

        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transferencia fallida");
    }   
}



contract FallbackOptimized {
    mapping(address => uint256) private balances;

    receive() external payable{}
    fallback() external payable {
       revert("Esta funcion fallback esta bloqueada para recibir pagos");
    }

    function deposit() external payable {
        balances[msg.sender] += balances[msg.sender];
    }

    function withdraw() public {
        uint256 amount = balances[msg.sender];
        require(amount > 0, "Fondos insuficinetes");

        balances[msg.sender] = 0;

        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transferencia fallida");
    }   
}
